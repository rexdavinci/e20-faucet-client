{"version":3,"sources":["components/FormI/Handlers/index.js","utils/index.js","components/FormI/index.js","App.js","reportWebVitals.js","index.js"],"names":["gsn","require","web3Provider","Web3","process","receive","e","a","preventDefault","address","target","RelayProvider","newProvider","provider","config","paymasterAddress","init","gsnProvider","account","ethers","Wallet","Buffer","from","repeat","addAccount","privateKey","replace","etherProvider","providers","Web3Provider","signer","getSigner","faucet","Contract","FaucetMeta","abi","dropTo","error","message","sendDrop","toast","setHash","toastId","setRequested","res","hash","success","includes","FormI","useState","requested","Row","Col","md","span","offset","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","name","Button","variant","disabled","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ygGAGMA,EAAMC,EAAQ,KAKdC,EAAe,IAAIC,IAAKC,wEAEjBC,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACrBD,EAAEE,iBACIC,EAAUH,EAAEI,OAAF,cAFK,kBAIOV,EAAIW,cAAcC,YAAY,CAAEC,SAAUX,EAAcY,OAAQ,CAAEC,iBATvE,gDAS4FC,OAJ9F,cAIbC,EAJa,OAMbC,EAAU,IAAIC,IAAOC,OAAOC,EAAOC,KAAK,IAAIC,OAAO,IAAI,QAC7DN,EAAYO,WAAW,CAACf,QAASS,EAAQT,QAASgB,WAAYJ,EAAOC,KAAKJ,EAAQO,WAAWC,QAAQ,KAAK,IAAI,SAExGC,EAAgB,IAAIR,IAAOS,UAAUC,aAAaZ,GAClDa,EAASH,EAAcI,UAAUb,EAAQT,SAEzCuB,EAAS,IAAIb,IAAOc,SAhBP,6CAkBjBC,IAAWC,IACXL,GAfiB,UAiBNE,EAAOI,OAAO3B,GAjBR,oGAmBZ,KAAE4B,MAAMC,SAnBI,0DAAH,sDAuBPC,EAAQ,uCAAG,WAAOjC,EAAGkC,EAAOC,EAASC,EAASC,GAAnC,eAAApC,EAAA,6DACtBoC,GAAa,GADS,SAEJtC,EAAQC,GAFJ,QAEhBsC,EAFgB,QAGfC,MACLL,EAAMM,QAAQ,iBAAkB,CAAEJ,YAClCD,EAAQ,8CAAD,OAA+CG,EAAIC,QACnC,kBAARD,GAAoBA,EAAIG,SAAS,aAChDP,EAAMH,MAAMO,EAAK,CAAEF,YAErBC,GAAa,GATS,2CAAH,gE,yDCjCrB,gD,8uBCmCeK,EA3BD,SAAC,GAA8B,IAA5BR,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASI,EAAW,EAAXA,KAAW,EACRI,oBAAS,GADD,mBACnCC,EADmC,KACxBP,EADwB,KAG1C,OACE,cAACQ,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAA5B,UACE,eAACC,EAAA,EAAD,CAAMC,SAAU,SAACnD,GAAD,OAAOiC,YAASjC,EAAGkC,EAAOC,EAPlC,WAOoDE,IAA5D,UACE,eAACa,EAAA,EAAKE,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,iCACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,2BAA2BC,KAAK,eAExE,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,SAASK,SAAUjB,EAAlD,4BAIF,8BACGA,EAAY,wCAA0C,OAGzD,8BACGL,U,kBCZIuB,G,OAVH,WAAO,IAAD,EACSnB,mBAAS,IADlB,mBACTJ,EADS,KACHJ,EADG,KAEhB,OACE,eAAC4B,EAAA,EAAD,WACE,cAAC,EAAD,CAAO7B,MAAOA,IAAOC,QAASA,EAASI,KAAMA,IAC7C,cAAC,IAAD,SCCSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41f04663.chunk.js","sourcesContent":["import { ethers } from 'ethers'\nimport Web3 from 'web3-providers-http'\nimport { FaucetMeta } from '../../../utils'\nconst gsn = require('@opengsn/gsn')\n\nconst paymasterAddress = '0x4eFA8962F68aD36ecb215beCA1B6eF5E29DC4438' // deployed paymaster address\nconst targetContract = '0xCbe5860657b5e7AFBC2d1E62b3926833B38541C3' // deployed faucet address\n\nconst web3Provider = new Web3(process.env.REACT_APP_PROVIDER_URI)\n\nexport const receive = async (e) => {\n  e.preventDefault()\n  const address = e.target['address']['value']\n  try {\n    const gsnProvider = await gsn.RelayProvider.newProvider({ provider: web3Provider, config: { paymasterAddress }}).init()\n\n    const account = new ethers.Wallet(Buffer.from('1'.repeat(64),'hex'))\n    gsnProvider.addAccount({address: account.address, privateKey: Buffer.from(account.privateKey.replace('0x',''),'hex') })\n\n    const etherProvider = new ethers.providers.Web3Provider(gsnProvider)\n    const signer = etherProvider.getSigner(account.address)\n\n    const faucet = new ethers.Contract(\n      targetContract,\n      FaucetMeta.abi,\n      signer\n    )\n    return await faucet.dropTo(address)\n  } catch(e) {\n    return e.error.message\n  }\n}\n\nexport const sendDrop = async (e, toast, setHash, toastId, setRequested) => {\n  setRequested(true)\n  const res = await receive(e)\n  if(res.hash) {\n    toast.success('A drop for you', { toastId })\n    setHash(`Successful: https://goerli.etherscan.io/tx/${res.hash}`)\n  } else if(typeof res === 'string' && res.includes('reverted')) {\n    toast.error(res, { toastId })\n  }\n  setRequested(false)\n}","export { default as FaucetMeta } from './faucet.json'","import React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { sendDrop } from './Handlers'\n\nconst toastId = 'akirunku'\nconst FormI = ({ toast, setHash, hash }) => {\n  const [requested, setRequested] = useState(false)\n\n  return (\n    <Row>\n      <Col md={{ span: 6, offset: 3 }} >\n        <Form onSubmit={(e) => sendDrop(e, toast, setHash, toastId, setRequested)}>\n          <Form.Group controlId=\"address\">\n            <Form.Label>Enter Your Address</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Ethereum Address (0x...)\" name=\"address\" />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" disabled={requested}>\n            Get Droplet\n          </Button>\n        </Form>\n        <div>\n          {requested ? 'Request sent, waiting for response...' : null}\n        </div>\n        \n        <div>\n          {hash}\n        </div>\n      </Col>\n    </Row>  \n  )\n}\n\nexport default FormI\n","import React, { useState } from 'react';\nimport { FormI } from './components';\nimport Container from 'react-bootstrap/Container';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  const [hash, setHash] =  useState('')\n  return (\n    <Container>\n      <FormI toast={toast} setHash={setHash} hash={hash}/>\n      <ToastContainer />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}